// <auto-generated />
using System;
using ArkBot.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArkBot.Migrations
{
    [DbContext(typeof(EfDatabaseContext))]
    partial class EfDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArkBot.Database.Model.PlayedEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeInSeconds")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Played");
                });

            modelBuilder.Entity("ArkBot.Database.Model.TamedCreatureLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<double?>("ApproxFoodPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("ApproxHealthPercentage")
                        .HasColumnType("float");

                    b.Property<int>("BaseLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("Experience")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<int?>("FullLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("ImprintingQuality")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsConfirmedDead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInCluster")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedLogEntries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciesClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TamedAtTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TamedTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tamer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Team")
                        .HasColumnType("int");

                    b.Property<string>("Tribe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Y")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Z")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TamedCreatureLogEntries");
                });

            modelBuilder.Entity("ArkBot.Database.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisallowVoting")
                        .HasColumnType("bit");

                    b.Property<long>("DiscordId")
                        .HasColumnType("bigint");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Unlinked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArkBot.Database.Model.UserVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InitiatedVote")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Vetoed")
                        .HasColumnType("bit");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.Property<bool>("VotedFor")
                        .HasColumnType("bit");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoteId");

                    b.ToTable("UserVotes");
                });

            modelBuilder.Entity("ArkBot.Database.Model.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<string>("ServerKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Votes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Vote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.WildCreatureLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WildCreatureLogs");
                });

            modelBuilder.Entity("ArkBot.Database.Model.WildCreatureLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("WildCreatureLogEntries");
                });

            modelBuilder.Entity("ArkBot.Database.Model.BanVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TribeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BanVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.DestroyWildDinosVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.HasDiscriminator().HasValue("DestroyWildDinosVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.RestartServerVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.HasDiscriminator().HasValue("RestartServerVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.SetTimeOfDayVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.Property<string>("TimeOfDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SetTimeOfDayVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.UnbanVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.Property<string>("CharacterName")
                        .HasColumnName("UnbanVote_CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerName")
                        .HasColumnName("UnbanVote_PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnName("UnbanVote_SteamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TribeName")
                        .HasColumnName("UnbanVote_TribeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UnbanVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.UpdateServerVote", b =>
                {
                    b.HasBaseType("ArkBot.Database.Model.Vote");

                    b.HasDiscriminator().HasValue("UpdateServerVote");
                });

            modelBuilder.Entity("ArkBot.Database.Model.PlayedEntry", b =>
                {
                    b.HasOne("ArkBot.Database.Model.User", "User")
                        .WithMany("Played")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ArkBot.Database.Model.UserVote", b =>
                {
                    b.HasOne("ArkBot.Database.Model.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArkBot.Database.Model.Vote", "Vote")
                        .WithMany("Votes")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArkBot.Database.Model.WildCreatureLogEntry", b =>
                {
                    b.HasOne("ArkBot.Database.Model.WildCreatureLog", "Log")
                        .WithMany("Entries")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
